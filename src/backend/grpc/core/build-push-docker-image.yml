trigger:
- main
pr: none

resources:
- repo: self

variables:
  # .NET Variables
  projectName: LoteTablas.Core.Service
  buildConfiguration: 'Release'
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7afe5a4e-42c9-495a-9e0b-ce4c3ffa613a'
  imageRepository: 'vicgital/lotetablas.core.service'
  #containerRegistry: 'lotetablas.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'main-$(Build.SourceVersion)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build & Push Docker Image Stage
  jobs:
  - job: Build
    displayName: Build & Push Docker Image Job
    pool:
      vmImage: $(vmImageName)
    steps:
    # Nuget Authenticate
    - task: NuGetAuthenticate@1
      displayName: 'Nuget Authenticate'
    # Publish .NET project to artifacts staging directory
    - task: DotNetCoreCLI@2
      displayName: 'DotNet Publish $(projectName)'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/src/$(projectName)/$(projectName).csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
        zipAfterPublish: false
        modifyOutputPath: true
    # Copy Dockerfile to artifacts staging directory
    - task: CopyFiles@2
      displayName: 'Copy Dockerfile'
      inputs:
        Contents: '**/Dockerfile'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Output'
    # Build and push Docker image to container registry
    - task: Docker@2
      displayName: Login to Docker Hub
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      displayName: Build and push Docker image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: '$(Build.ArtifactStagingDirectory)/Output/Dockerfile'
        tags: |
          $(tag)
